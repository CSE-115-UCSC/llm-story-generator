{"ast":null,"code":"var _jsxFileName = \"/Users/rajat/Desktop/CSE115A/Veracity-llm-story-generator/frontend/site/src/App.js\",\n  _s = $RefreshSig$();\nimport { ThemeProvider } from '@mui/material/styles';\nimport React, { useState } from 'react';\nimport { Container, Box, Button, InputBase, Typography, CssBaseline, Paper, styled, Tab, Tabs } from '@mui/material';\nimport Content from './Content';\nimport Chat from './Chat';\nimport theme from './theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChaptersContainer = styled(Paper)({\n  width: '100%',\n  height: '100%',\n  backgroundColor: '#f0f0f0',\n  padding: '10px',\n  boxSizing: 'border-box'\n});\n_c = ChaptersContainer;\nconst ChatInputContainer = styled(Box)(({\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  padding: '10px',\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.default\n}));\nconst StyledInputBase = styled(InputBase)(({\n  theme\n}) => ({\n  flexGrow: 1,\n  padding: '10px',\n  borderRadius: '20px',\n  backgroundColor: theme.palette.custom.inputField.background,\n  marginRight: '10px',\n  color: theme.palette.custom.inputField.text\n}));\nconst ChatMessage = styled(Box)(({\n  user,\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  marginLeft: '8px',\n  padding: '10px',\n  borderRadius: '5px',\n  backgroundColor: user ? theme.palette.custom.messageBubble.user.background : theme.palette.custom.messageBubble.bot.background,\n  color: user ? theme.palette.custom.messageBubble.user.text : theme.palette.custom.messageBubble.bot.text,\n  maxWidth: '80%'\n}));\nfunction App() {\n  _s();\n  // State to manage the current view (chapters, summaries, characters)\n  const [view, setView] = useState('chapters');\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      disableGutters: true,\n      maxWidth: false,\n      sx: {\n        height: '100vh',\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        width: \"40%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(ChaptersContainer, {\n          children: /*#__PURE__*/_jsxDEV(Content, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        width: \"60%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 2\n  }, this);\n}\n/*\n// Chat component for the left sidebar\nfunction Chat() {\n  const [message, setMessage] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\")\n\n  const getLLMResponse = () => {\n    setPrompt(\"\")\n    fetch('http://127.0.0.1:5000/chapter/1', {\n      method: 'POST', // Specify the request method\n      headers: {\n          'Content-Type': 'application/json' // Specify the content type\n      },\n      body: JSON.stringify({\"query\": prompt}) // Convert the data to a JSON string\n    })\n    .then((response) => {\n      const reader = response.body.getReader();\n      // read() returns a promise that resolves when a value has been received\n      reader.read().then(function pump({ done, value }) {\n        if (done) {\n          // Do something with last chunk of data then exit reader\n          return;\n        }\n        // Otherwise do something here to process current chunk\n        const chunkString = new TextDecoder().decode(value);\n        // Log the chunk string\n        console.log(chunkString);\n        setMessage(message => [...message, chunkString])\n        // Read some more, and call this function again\n        return reader.read().then(pump);\n      });\n    })\n    .catch((err) => console.error(err));\n  }\n  \n  return (\n    <Box>\n      <Typography variant=\"h6\">Chat with AI</Typography>\n      <ChatMessage>{message}</ChatMessage>\n      <ChatInputContainer>\n        <StyledInputBase\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && getLLMResponse()}\n          placeholder=\"Type a message...\"\n        />\n        <Button variant=\"outlined\" onClick={getLLMResponse}>\n        generate\n        </Button>\n      </ChatInputContainer>\n    </Box>\n  );\n}\n*/\n_s(App, \"3AtIRcLeRJZkSgeULohRf+9rIhs=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChaptersContainer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["ThemeProvider","React","useState","Container","Box","Button","InputBase","Typography","CssBaseline","Paper","styled","Tab","Tabs","Content","Chat","theme","jsxDEV","_jsxDEV","ChaptersContainer","width","height","backgroundColor","padding","boxSizing","_c","ChatInputContainer","display","alignItems","borderTop","palette","divider","background","default","StyledInputBase","flexGrow","borderRadius","custom","inputField","marginRight","color","text","ChatMessage","user","marginLeft","messageBubble","bot","maxWidth","App","_s","view","setView","children","fileName","_jsxFileName","lineNumber","columnNumber","disableGutters","sx","_c2","$RefreshReg$"],"sources":["/Users/rajat/Desktop/CSE115A/Veracity-llm-story-generator/frontend/site/src/App.js"],"sourcesContent":["import { ThemeProvider } from '@mui/material/styles';\nimport React, { useState } from 'react';\nimport { Container, Box, Button, InputBase, Typography, CssBaseline, Paper, styled, Tab, Tabs } from '@mui/material';\nimport Content from './Content';\nimport Chat from './Chat';\nimport theme from './theme';\n\nconst ChaptersContainer = styled(Paper)({\n  width: '100%',\n  height: '100%', \n  backgroundColor: '#f0f0f0',\n  padding: '10px',\n  boxSizing: 'border-box',\n});\n\nconst ChatInputContainer = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  padding: '10px',\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.default,\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  flexGrow: 1,\n  padding: '10px',\n  borderRadius: '20px',\n  backgroundColor: theme.palette.custom.inputField.background,\n  marginRight: '10px',\n  color: theme.palette.custom.inputField.text,\n}));\n\nconst ChatMessage = styled(Box)(({ user, theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  marginLeft: '8px',\n  padding: '10px',\n  borderRadius: '5px',\n  backgroundColor: user ? theme.palette.custom.messageBubble.user.background : theme.palette.custom.messageBubble.bot.background,\n  color: user ? theme.palette.custom.messageBubble.user.text : theme.palette.custom.messageBubble.bot.text,\n  maxWidth: '80%',\n}));\n\nfunction App() {\n  // State to manage the current view (chapters, summaries, characters)\n  const [view, setView] = useState('chapters');\n  \n  return (\n\t<ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Container disableGutters maxWidth={false} sx={{ height: '100vh', display: 'flex' }}>\n      <Box width=\"40%\" height=\"100%\">\n        <ChaptersContainer>\n          <Content />\n        </ChaptersContainer>\n      </Box>\n      <Box width=\"60%\" height=\"100%\">\n        <Chat />\n      </Box>\n    </Container>\n\t</ThemeProvider>\n  );\n}\n/*\n// Chat component for the left sidebar\nfunction Chat() {\n  const [message, setMessage] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\")\n\n  const getLLMResponse = () => {\n    setPrompt(\"\")\n    fetch('http://127.0.0.1:5000/chapter/1', {\n      method: 'POST', // Specify the request method\n      headers: {\n          'Content-Type': 'application/json' // Specify the content type\n      },\n      body: JSON.stringify({\"query\": prompt}) // Convert the data to a JSON string\n    })\n    .then((response) => {\n      const reader = response.body.getReader();\n      // read() returns a promise that resolves when a value has been received\n      reader.read().then(function pump({ done, value }) {\n        if (done) {\n          // Do something with last chunk of data then exit reader\n          return;\n        }\n        // Otherwise do something here to process current chunk\n        const chunkString = new TextDecoder().decode(value);\n        // Log the chunk string\n        console.log(chunkString);\n        setMessage(message => [...message, chunkString])\n        // Read some more, and call this function again\n        return reader.read().then(pump);\n      });\n    })\n    .catch((err) => console.error(err));\n  }\n  \n  return (\n    <Box>\n      <Typography variant=\"h6\">Chat with AI</Typography>\n      <ChatMessage>{message}</ChatMessage>\n      <ChatInputContainer>\n        <StyledInputBase\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && getLLMResponse()}\n          placeholder=\"Type a message...\"\n        />\n        <Button variant=\"outlined\" onClick={getLLMResponse}>\n        generate\n        </Button>\n      </ChatInputContainer>\n    </Box>\n  );\n}\n*/\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}